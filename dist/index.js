(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

var _state = require("./state");

function init() {
	setupCanvas();

	_state.canvas.bufferContext.fillStyle = "white";
	_state.canvas.bufferContext.fillRect(0, 0, _state.options.width, _state.options.height);

	_state.canvas.bufferContext.fillStyle = "green";
	_state.canvas.bufferContext.fillRect(10, 10, 100, 100);

	_state.canvas.context.clearRect(0, 0, _state.options.width, _state.options.height);
	_state.canvas.context.drawImage(_state.canvas.buffer, 0, 0);
}

function setupCanvas() {
	_state.canvas.element = document.querySelector('#canvas');
	_state.canvas.context = _state.canvas.element.getContext('2d');

	_state.canvas.width = _state.canvas.element.width = _state.options.width;
	_state.canvas.height = _state.canvas.element.height = _state.options.width;

	_state.canvas.buffer = document.createElement('canvas');
	_state.canvas.buffer.width = _state.canvas.width;
	_state.canvas.buffer.height = _state.canvas.height;

	_state.canvas.bufferContext = _state.canvas.buffer.getContext('2d');
}

window.addEventListener('load', init);

},{"./state":2}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
var canvas = {
	element: null,
	context: null,
	buffer: null,
	bufferContext: null,
	width: 0,
	height: 0
};

var options = {
	width: 800,
	height: 600,
	scaleX: 1,
	scaleY: 1
};

exports.canvas = canvas;
exports.options = options;

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmNcXGluZGV4LmpzIiwic3JjXFxzdGF0ZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0FDQUE7O0FBRUEsU0FBUyxJQUFULEdBQWU7QUFDZDs7QUFFQSxlQUFPLGFBQVAsQ0FBcUIsU0FBckIsR0FBaUMsT0FBakM7QUFDQSxlQUFPLGFBQVAsQ0FBcUIsUUFBckIsQ0FBOEIsQ0FBOUIsRUFBaUMsQ0FBakMsRUFBb0MsZUFBUSxLQUE1QyxFQUFtRCxlQUFRLE1BQTNEOztBQUVBLGVBQU8sYUFBUCxDQUFxQixTQUFyQixHQUFpQyxPQUFqQztBQUNBLGVBQU8sYUFBUCxDQUFxQixRQUFyQixDQUE4QixFQUE5QixFQUFrQyxFQUFsQyxFQUFzQyxHQUF0QyxFQUEyQyxHQUEzQzs7QUFFQSxlQUFPLE9BQVAsQ0FBZSxTQUFmLENBQXlCLENBQXpCLEVBQTRCLENBQTVCLEVBQStCLGVBQVEsS0FBdkMsRUFBOEMsZUFBUSxNQUF0RDtBQUNBLGVBQU8sT0FBUCxDQUFlLFNBQWYsQ0FBeUIsY0FBTyxNQUFoQyxFQUF3QyxDQUF4QyxFQUEyQyxDQUEzQztBQUNBOztBQUVELFNBQVMsV0FBVCxHQUFzQjtBQUNyQixlQUFPLE9BQVAsR0FBaUIsU0FBUyxhQUFULENBQXVCLFNBQXZCLENBQWpCO0FBQ0EsZUFBTyxPQUFQLEdBQWlCLGNBQU8sT0FBUCxDQUFlLFVBQWYsQ0FBMEIsSUFBMUIsQ0FBakI7O0FBRUEsZUFBTyxLQUFQLEdBQWUsY0FBTyxPQUFQLENBQWUsS0FBZixHQUF1QixlQUFRLEtBQTlDO0FBQ0EsZUFBTyxNQUFQLEdBQWdCLGNBQU8sT0FBUCxDQUFlLE1BQWYsR0FBd0IsZUFBUSxLQUFoRDs7QUFFQSxlQUFPLE1BQVAsR0FBZ0IsU0FBUyxhQUFULENBQXVCLFFBQXZCLENBQWhCO0FBQ0EsZUFBTyxNQUFQLENBQWMsS0FBZCxHQUFzQixjQUFPLEtBQTdCO0FBQ0EsZUFBTyxNQUFQLENBQWMsTUFBZCxHQUF1QixjQUFPLE1BQTlCOztBQUVBLGVBQU8sYUFBUCxHQUF1QixjQUFPLE1BQVAsQ0FBYyxVQUFkLENBQXlCLElBQXpCLENBQXZCO0FBQ0E7O0FBRUQsT0FBTyxnQkFBUCxDQUF3QixNQUF4QixFQUFnQyxJQUFoQzs7Ozs7Ozs7QUM3QkEsSUFBTSxTQUFTO0FBQ2QsVUFBUyxJQURLO0FBRWQsVUFBUyxJQUZLO0FBR2QsU0FBUSxJQUhNO0FBSWQsZ0JBQWUsSUFKRDtBQUtkLFFBQU8sQ0FMTztBQU1kLFNBQVE7QUFOTSxDQUFmOztBQVNBLElBQU0sVUFBVTtBQUNmLFFBQU8sR0FEUTtBQUVmLFNBQVEsR0FGTztBQUdmLFNBQVEsQ0FITztBQUlmLFNBQVE7QUFKTyxDQUFoQjs7UUFPUSxNLEdBQUEsTTtRQUFRLE8sR0FBQSxPIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsImltcG9ydCB7Y2FudmFzLCBvcHRpb25zfSBmcm9tIFwiLi9zdGF0ZVwiO1xuXG5mdW5jdGlvbiBpbml0KCl7XG5cdHNldHVwQ2FudmFzKCk7XG5cblx0Y2FudmFzLmJ1ZmZlckNvbnRleHQuZmlsbFN0eWxlID0gXCJ3aGl0ZVwiO1xuXHRjYW52YXMuYnVmZmVyQ29udGV4dC5maWxsUmVjdCgwLCAwLCBvcHRpb25zLndpZHRoLCBvcHRpb25zLmhlaWdodCk7XG5cblx0Y2FudmFzLmJ1ZmZlckNvbnRleHQuZmlsbFN0eWxlID0gXCJncmVlblwiO1xuXHRjYW52YXMuYnVmZmVyQ29udGV4dC5maWxsUmVjdCgxMCwgMTAsIDEwMCwgMTAwKTtcblxuXHRjYW52YXMuY29udGV4dC5jbGVhclJlY3QoMCwgMCwgb3B0aW9ucy53aWR0aCwgb3B0aW9ucy5oZWlnaHQpO1xuXHRjYW52YXMuY29udGV4dC5kcmF3SW1hZ2UoY2FudmFzLmJ1ZmZlciwgMCwgMCk7XG59XG5cbmZ1bmN0aW9uIHNldHVwQ2FudmFzKCl7XG5cdGNhbnZhcy5lbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NhbnZhcycpO1xuXHRjYW52YXMuY29udGV4dCA9IGNhbnZhcy5lbGVtZW50LmdldENvbnRleHQoJzJkJyk7XG5cblx0Y2FudmFzLndpZHRoID0gY2FudmFzLmVsZW1lbnQud2lkdGggPSBvcHRpb25zLndpZHRoO1xuXHRjYW52YXMuaGVpZ2h0ID0gY2FudmFzLmVsZW1lbnQuaGVpZ2h0ID0gb3B0aW9ucy53aWR0aDtcblxuXHRjYW52YXMuYnVmZmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG5cdGNhbnZhcy5idWZmZXIud2lkdGggPSBjYW52YXMud2lkdGg7XG5cdGNhbnZhcy5idWZmZXIuaGVpZ2h0ID0gY2FudmFzLmhlaWdodDtcblxuXHRjYW52YXMuYnVmZmVyQ29udGV4dCA9IGNhbnZhcy5idWZmZXIuZ2V0Q29udGV4dCgnMmQnKTtcbn1cblxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBpbml0KTtcbiIsImNvbnN0IGNhbnZhcyA9IHtcblx0ZWxlbWVudDogbnVsbCxcblx0Y29udGV4dDogbnVsbCxcblx0YnVmZmVyOiBudWxsLFxuXHRidWZmZXJDb250ZXh0OiBudWxsLFxuXHR3aWR0aDogMCxcblx0aGVpZ2h0OiAwXG59O1xuXG5jb25zdCBvcHRpb25zPSAge1xuXHR3aWR0aDogODAwLFxuXHRoZWlnaHQ6IDYwMCxcblx0c2NhbGVYOiAxLFxuXHRzY2FsZVk6IDFcbn07XG5cbmV4cG9ydCB7Y2FudmFzLCBvcHRpb25zfTtcbiJdfQ==
